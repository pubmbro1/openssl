/*
 ============================================================================
 Name        : HW.c
 Author      : 
 Version     :
 Copyright   : Your copyright notice
 Description : Hello World in C, Ansi-style
 ============================================================================
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <openssl/evp.h>
#include <openssl/ec.h>

#define A_PUB_FILE "alice_public.key"
#define B_PUB_FILE "bob_public.key"

void initDomain(EVP_PKEY **params){
	EVP_PKEY_CTX *pctx = EVP_PKEY_CTX_new_id(EVP_PKEY_EC, NULL);

	EVP_PKEY_paramgen_init(pctx);
	EVP_PKEY_CTX_set_ec_paramgen_curve_nid(pctx, NID_X9_62_prime256v1);

	EVP_PKEY_paramgen(pctx, params);

	EVP_PKEY_CTX_free(pctx);
}

void generateKey(EVP_PKEY **params, EVP_PKEY **pkey){
	EVP_PKEY_CTX *kctx = EVP_PKEY_CTX_new( *params, NULL);

	*pkey = EVP_PKEY_new();
	EVP_PKEY_keygen_init(kctx);
	EVP_PKEY_keygen(kctx, pkey);

	EVP_PKEY_CTX_free(kctx);
}

void serializePubKey(EVP_PKEY *pkey, const char * filename, const char *who){
	printf("2\n");
	EC_KEY *eckey = EVP_PKEY_get1_EC_KEY(pkey);
	printf("1\n");
	EC_POINT *ecpoint = EC_KEY_get0_public_key(eckey);
	printf("a\n");
	size_t bufLen = EC_POINT_point2oct(EC_KEY_get0_group(eckey),
			ecpoint, POINT_CONVERSION_COMPRESSED, NULL, 0, NULL);
	printf("b\n");
	unsigned char *pubKeyChar = (unsigned char *)malloc(bufLen);
	printf("c\n");
	EC_POINT_point2oct(EC_KEY_get0_group(eckey), ecpoint,
			POINT_CONVERSION_COMPRESSED, pubKeyChar, bufLen, NULL);
	printf("\n[%s's public key]\n", who);

	for(int i=0;i<bufLen;i++){
		printf("0x%X ", pubKeyChar[i]);
	}
	printf("\n");

	FILE *fp = fopen(filename, "w");
	fwrite(pubKeyChar, sizeof(char), bufLen, fp);
	printf("%s file created\n", filename);

	EC_KEY_free(eckey);
	EC_POINT_free(ecpoint);
	free(pubKeyChar);
	fclose(fp);
}

void deserializePubKey(EVP_PKEY **pub, const char * filename){
	EC_KEY *reckey = EC_KEY_new_by_curve_name(NID_X9_62_prime256v1);
	EC_POINT *rpoint = EC_POINT_new(EC_KEY_get0_group(reckey));

	FILE *fp = fopen(filename, "r");
	fseek(fp, 0, SEEK_END);
	int len = ftell(fp);
	unsigned char *pubKeyChar = (unsigned char *) malloc (len);
	fseek(fp, 0, SEEK_SET);
	fread(pubKeyChar, len, 1, fp);

	EC_POINT_oct2point(EC_KEY_get0_group(reckey), rpoint, pubKeyChar, (size_t)len, NULL);
	EC_KEY_set_public_key(reckey, rpoint);

	*pub = EVP_PKEY_new();
	EVP_PKEY_set1_EC_KEY( *pub , reckey);


	printf("\n[Data from %s]\n", filename);
	for(int i=0;i<len;i++){
		printf("0x%X ", pubKeyChar[i]);
	}
	printf("\n");

	EC_KEY_free(reckey);
	EC_POINT_free(rpoint);
	fclose(fp);
	free(pubKeyChar);

}

void computeSharedSecret(EVP_PKEY *pkey, EVP_PKEY *peer_pub_key, unsigned char **secret, const char *who){
	EVP_PKEY_CTX *ctx = EVP_PKEY_CTX_new(pkey, NULL);
	EVP_PKEY_derive_init(ctx);
	EVP_PKEY_derive_set_peer(ctx, peer_pub_key);

	size_t len = 0;

	EVP_PKEY_derive(ctx, NULL, &len);

	*secret = (unsigned char *) malloc(len);

	EVP_PKEY_derive(ctx, *secret, &len);

	printf("\n[Shared secret on %s]\n", who);
	for(int i=0;i<len;i++){
		printf("0x%X ", secret[i]);
	}
	printf("\n");

	EVP_PKEY_CTX_free(ctx);
}

void compareSharedSecret(unsigned char *secret1, unsigned char *secret2){
	printf("\n[Comparison result]\n");

	if(memcmp(secret1, secret2, strlen(secret1)) == 0){
		printf("Equal\n");
	}
	else{
		printf("Unequal\n");
	}
}

int main(void) {
	EVP_PKEY *params = NULL;		//domain
	EVP_PKEY *a_pkey = NULL;		//alice's keypair
	EVP_PKEY *b_pkey = NULL;		//bob's keypair

	EVP_PKEY *b_pub_by_a = NULL;		//bob's public key
	EVP_PKEY *a_pub_by_b = NULL; 		//alice's public key

	unsigned char *a_secret = NULL;		//alice's shared key
	unsigned char *b_secret = NULL;		//bob's shared key


	initDomain(&params);

	printf("\n>> Beginning of the 1st part of Alice\n");

	generateKey(&params, &a_pkey);
	serializePubKey(b_pkey, B_PUB_FILE, "Alice");
	printf("abc\n");
	printf("\n<< End of the 1st part of Alice\n");


	printf("\n>> Beginning of the 1st part of Bob\n");
	generateKey(&params, &b_pkey);
	serializePubKey(a_pkey, A_PUB_FILE, "Bob");
	printf("\n<< End of the 1st part of Bob\n");


	printf("\n>> Beginning of the 2st part of Alice\n");
	deserializePubKey(&b_pub_by_a, B_PUB_FILE);
	computeSharedSecret(a_pkey, b_pub_by_a, &a_secret, "Alice");
	printf("\n<< End of the 2st part of Alice\n");


	printf("\n>> Beginning of the 2st part of Bob\n");
	deserializePubKey(&a_pub_by_b, A_PUB_FILE);
	computeSharedSecret(b_pkey, a_pub_by_b, &b_secret, "Bob");
	compareSharedSecret(a_secret, b_secret);
	printf("\n<< End of the 2st part of Bob\n");



	//free key
	EVP_PKEY_free(params);
	EVP_PKEY_free(a_pkey);
	EVP_PKEY_free(b_pkey);

	EVP_PKEY_free(a_pub_by_b);
	EVP_PKEY_free(b_pub_by_a);

	free(a_secret);
	free(b_secret);

	return EXIT_SUCCESS;
}
